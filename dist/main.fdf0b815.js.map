{"version":3,"sources":["ts/openWeather.ts","ts/ui.ts","ts/main.ts"],"names":[],"mappings":"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","file":"main.fdf0b815.js","sourceRoot":"..\\src","sourcesContent":["//openWeatcher class\r\nexport class OpenWeather {\r\n  private apiKey: string;\r\n\r\n  constructor() {\r\n    this.apiKey = process.env.API_KEY;\r\n  }\r\n\r\n  async getData(location: string) {\r\n    const response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${location}&units=metric&appid=${this.apiKey}`\r\n    );\r\n    const data = await response.json();\r\n    return data;\r\n  }\r\n}\r\n","import { OpenWeather } from './openWeather';\r\nimport { WeatherData } from './openWeatherInterface';\r\n\r\n//UI Class\r\nexport class UI extends OpenWeather {\r\n  defaultContainer: HTMLDivElement;\r\n  london: HTMLParagraphElement;\r\n  newYork: HTMLParagraphElement;\r\n  tokyo: HTMLParagraphElement;\r\n  location: HTMLParagraphElement;\r\n  invalidCityAlert: HTMLHeadingElement;\r\n  container: HTMLElement;\r\n  dateParagraph: HTMLParagraphElement;\r\n  temperature: HTMLParagraphElement;\r\n  weatherImage: HTMLElement;\r\n  weatherDesc: HTMLDivElement;\r\n  maxTemp: HTMLDivElement;\r\n  minTemp: HTMLParagraphElement;\r\n  wind: HTMLParagraphElement;\r\n  sunrise: HTMLParagraphElement;\r\n  sunset: HTMLParagraphElement;\r\n  humidity: HTMLParagraphElement;\r\n  date: Date;\r\n\r\n  constructor() {\r\n    super();\r\n    this.defaultContainer = document.getElementById(\r\n      'container-default'\r\n    )! as HTMLDivElement;\r\n    this.london = document.getElementById('default-1')! as HTMLParagraphElement;\r\n    this.newYork = document.getElementById(\r\n      'default-2'\r\n    )! as HTMLParagraphElement;\r\n    this.tokyo = document.getElementById('default-3')! as HTMLParagraphElement;\r\n    this.location = document.getElementById(\r\n      'location'\r\n    )! as HTMLParagraphElement;\r\n    this.invalidCityAlert = document.getElementById(\r\n      'invalidCityAlert'\r\n    )! as HTMLHeadingElement;\r\n    this.container = document.getElementById('container')! as HTMLElement;\r\n    this.dateParagraph = document.getElementById(\r\n      'date'\r\n    )! as HTMLParagraphElement;\r\n    this.temperature = document.getElementById('temp')! as HTMLParagraphElement;\r\n    this.weatherImage = document.getElementById('weather')! as HTMLElement;\r\n    this.weatherDesc = document.getElementById(\r\n      'weather-desc'\r\n    )! as HTMLDivElement;\r\n    this.maxTemp = document.getElementById('max-temp')! as HTMLDivElement;\r\n    this.minTemp = document.getElementById('min-temp')! as HTMLDivElement;\r\n    this.wind = document.getElementById('wind')! as HTMLDivElement;\r\n    this.sunrise = document.getElementById('sunrise')! as HTMLDivElement;\r\n    this.sunset = document.getElementById('sunset')! as HTMLDivElement;\r\n    this.humidity = document.getElementById('humidity')! as HTMLDivElement;\r\n    this.maxTemp = document.getElementById('max-temp')! as HTMLDivElement;\r\n\r\n    this.date = new Date();\r\n  }\r\n\r\n  //Display the default cities temperature\r\n  displayDefaultCities() {\r\n    this.getData('London').then((data: WeatherData) => {\r\n      this.populateDefaultCitiesInfo(data, this.london);\r\n    });\r\n    this.getData('New York').then((data: WeatherData) => {\r\n      this.populateDefaultCitiesInfo(data, this.newYork);\r\n    });\r\n    this.getData('Tokyo').then((data: WeatherData) => {\r\n      this.populateDefaultCitiesInfo(data, this.tokyo);\r\n    });\r\n  }\r\n\r\n  //Populate default cities with temp info\r\n  populateDefaultCitiesInfo(data: WeatherData, city: HTMLParagraphElement) {\r\n    city.innerHTML = `${Math.floor(data.main.temp)} &#8451;`;\r\n    city.classList.add('lg:text-2xl');\r\n  }\r\n\r\n  //Display weather data to DOM\r\n  displayWeather(data: WeatherData) {\r\n    this.location.innerHTML = data.name;\r\n    this.dateParagraph.innerHTML = `<p>${this.formatDate(this.date)}</p>`;\r\n    this.temperature.innerHTML = `<p>${Math.floor(data.main.temp)}&#8451</p>`;\r\n    this.checkWeatherDesc(data.weather[0].main);\r\n    this.weatherDesc.innerHTML = ` <p>${data.weather[0].main}</p>`;\r\n    this.maxTemp.innerHTML = ` <p>${Math.floor(data.main.temp_max)}&#8451;</p>`;\r\n    this.minTemp.innerHTML = ` <p>${Math.floor(data.main.temp_min)}&#8451;</p>`;\r\n    this.wind.innerHTML = `<p>${data.wind.speed}m/sec</p>`;\r\n    this.sunrise.innerHTML = `\r\n      <p>${this.formatTimestamp(data.sys.sunrise)}</p>`;\r\n    this.sunset.innerHTML = `<p>${this.formatTimestamp(data.sys.sunset)}</p>`;\r\n    this.humidity.innerHTML = ` <p>${data.main.humidity} %</p>`;\r\n  }\r\n\r\n  //Add different weather icon depending on weatherDesc (data from API)\r\n  checkWeatherDesc(weatherDesc: string) {\r\n    if (weatherDesc === 'Clouds') {\r\n      this.weatherImage.innerHTML = `<i class=\"fas fa-cloud text-6xl\" id=\"weather\"></i>`;\r\n    } else if (weatherDesc === 'Thunderstorm') {\r\n      this.weatherImage.innerHTML = `<i class=\"fas fa-bolt text-6xl\"></i>`;\r\n    } else if (weatherDesc === 'Drizzle' || weatherDesc === 'Rain') {\r\n      this.weatherImage.innerHTML = `<i class=\"fas fa-umbrella text-6xl\"></i>`;\r\n    } else if (weatherDesc === 'Snow') {\r\n      this.weatherImage.innerHTML = `<i class=\"fas fa-snowflake text-6xl\"></i>`;\r\n    } else if (weatherDesc === 'Clear') {\r\n      this.weatherImage.innerHTML = `<i class=\"far fa-sun text-6xl\"></i>`;\r\n    } else {\r\n      this.weatherImage.innerHTML = `<i class=\"fas fa-temperature-low text-6xl\"></i>`;\r\n    }\r\n  }\r\n\r\n  //Format date\r\n  formatDate(date: Date) {\r\n    let months: string[] = [];\r\n    months[0] = 'January';\r\n    months[1] = 'February';\r\n    months[2] = 'Mars';\r\n    months[3] = 'April';\r\n    months[4] = 'May';\r\n    months[5] = 'June';\r\n    months[6] = 'July';\r\n    months[7] = 'August';\r\n    months[8] = 'September';\r\n    months[9] = 'October';\r\n    months[10] = 'November';\r\n    months[11] = 'December';\r\n\r\n    let weekdays: string[] = [];\r\n    weekdays[0] = 'Sunday';\r\n    weekdays[1] = 'Monday';\r\n    weekdays[2] = 'Tuesday';\r\n    weekdays[3] = 'Wednesday';\r\n    weekdays[4] = 'Thursday';\r\n    weekdays[5] = 'Friday';\r\n    weekdays[6] = 'Saturday';\r\n\r\n    let d: Date = date,\r\n      month: string = ` ${months[d.getMonth()]}`,\r\n      day: string = ` ${d.getDate()}`,\r\n      dayString: string = ` ${weekdays[d.getDay()]}`,\r\n      year: number = d.getFullYear();\r\n\r\n    return [dayString, day, month, year].join(' ');\r\n  }\r\n\r\n  //Format the timestamp to 00:00:00 format\r\n  formatTimestamp(time: number) {\r\n    let timeStamp: number = time;\r\n    // Create a new JavaScript Date object based on the timestamp\r\n    // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n    const date: Date = new Date(timeStamp * 1000);\r\n    // Hours part from the timestamp\r\n    let hours: string = `${\r\n      date.getHours() < 10 ? `0${date.getHours()}` : `${date.getHours()}`\r\n    }`;\r\n    // Minutes part from the timestamp\r\n    let minutes: string = `${\r\n      date.getMinutes() < 10 ? `0${date.getMinutes()}` : `${date.getMinutes()}`\r\n    }`;\r\n    // Seconds part from the timestamp\r\n    let seconds: string = `${\r\n      date.getSeconds() < 10 ? `0${date.getSeconds()}` : `${date.getSeconds()}`\r\n    }`;\r\n    // Will display time in 10:30:23 format\r\n    const sun: string = `${hours}:${minutes.substr(-2)}:${seconds.substr(-2)}`;\r\n\r\n    return sun;\r\n  }\r\n}\r\n","import { OpenWeather } from './openWeather';\r\nimport { UI } from './ui';\r\nimport { WeatherData } from './openWeatherInterface';\r\n\r\nconst openWeather = new OpenWeather();\r\nconst ui = new UI();\r\nui.displayDefaultCities();\r\n\r\n//Input Event Listener\r\nconst input = document.getElementById('input')! as HTMLInputElement;\r\ninput.addEventListener('keypress', (e: KeyboardEvent) => {\r\n  if (e.key === 'Enter') {\r\n    if (input.value !== '') {\r\n      ui.defaultContainer.classList.add('hidden');\r\n      ui.container.classList.remove('hidden');\r\n      openWeather.getData(input.value).then((data: WeatherData) => {\r\n        ui.defaultContainer.classList.add('hidden');\r\n        ui.container.classList.remove('hidden');\r\n        if (data.message === 'city not found') {\r\n          ui.invalidCityAlert.classList.remove('invisible');\r\n          setTimeout(() => {\r\n            ui.invalidCityAlert.classList.add('invisible');\r\n          }, 2000);\r\n          ui.container.classList.add('hidden');\r\n          ui.defaultContainer.classList.remove('hidden');\r\n          input.value = '';\r\n        } else {\r\n          ui.displayWeather(data);\r\n          input.value = '';\r\n        }\r\n      });\r\n    }\r\n  }\r\n});\r\n"]}